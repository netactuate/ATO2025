{% if bgp_networks is defined and 'bgp_peers' in nodesetup %}
{%   set bgp = nodesetup['bgp_peers'] %}
router id {{ ansible_ssh_host }};

protocol device {
    scan time 10;
}

protocol static announcement4 {
    ipv4;
{% if 'IPv4' in bgp_networks and bgp_networks['IPv4']|length %}
{% for networkv4 in bgp_networks['IPv4'] %}
    route {{ networkv4.net }} reject;
{% endfor %}
{% endif %}
}

protocol static announcement6 {
    ipv6;
{% if 'IPv6' in bgp_networks and bgp_networks['IPv6']|length %}
{% for networkv6 in bgp_networks['IPv6'] %}
    route {{ networkv6.net }} reject;
{% endfor %}
{% endif %}
}

# IPv4 export filter
filter export_upstream_v4 {
    if proto = "announcement4" then {
        accept;
    } else {
        reject;
    }
}

# IPv6 export filter
filter export_upstream_v6 {
    if proto = "announcement6" then {
        accept;
    } else {
        reject;
    }
}

# BGP protocols for IPv4
{% if 'IPv4' in bgp and bgp['IPv4']|length %}
{% for remotepeer in bgp['IPv4'] %}
protocol bgp {
    local as {{ bgp['localasn'] }};
    source address {{ bgp['localpeerv4'] }};
    neighbor {{ remotepeer }} as {{ bgp['peerasn'] }};
    graceful restart on;
    ipv4 {
        import all;
        export filter export_upstream_v4;
    };
}
{% endfor %}
{% endif %}

# BGP protocols for IPv6
{% if 'IPv6' in bgp and bgp['IPv6']|length %}
{% for remotepeer in bgp['IPv6'] %}
protocol bgp {
    local as {{ bgp['localasn'] }};
    source address {{ bgp['localpeerv6'] }};
    neighbor {{ remotepeer }} as {{ bgp['peerasn'] }};
    graceful restart on;
    ipv6 {
        import all;
        export filter export_upstream_v6;
    };
}
{% endfor %}
{% endif %}

{% endif %}
